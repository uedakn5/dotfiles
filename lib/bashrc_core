#!/bin/bash
# .bashrc

if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# disable Ctrl-S
if [ "$SSH_TTY" != "" ]; then
	stty stop undef
	stty start undef
fi

AUTH_SOCK="$HOME/.ssh/.ssh-auth-sock"
if [ -S "$AUTH_SOCK" ]; then
    export SSH_AUTH_SOCK=$AUTH_SOCK
elif [ ! -S "$SSH_AUTH_SOCK" ]; then
    export SSH_AUTH_SOCK=$AUTH_SOCK
elif [ ! -L "$SSH_AUTH_SOCK" ]; then
    ln -snf "$SSH_AUTH_SOCK" $AUTH_SOCK && export SSH_AUTH_SOCK=$AUTH_SOCK
fi

export GPG_TTY=$(tty)

# turn off debug trap, turn on later if we're in screen
trap "" DEBUG

C() {
  case $1 in
    black)    echo -e -n "\033[1;30m";;
    red)      echo -e -n "\033[1;31m";;
    green)    echo -e -n "\033[1;32m";;
    yellow)   echo -e -n "\033[1;33m";;
    blue)     echo -e -n "\033[1;34m";;
    magenta)  echo -e -n "\033[1;35m";;
    cyan)     echo -e -n "\033[1;36m";;
    white)    echo -e -n "\033[1;37m";;
    backcyan) echo -e -n "\033[1;46m";;
    *) echo -e -n "\033[0m";;
  esac
}

ps1_rails() {
  if [ -z "${RAILS_ENV-}" ]; then
    return
  fi
  echo -n " RAILS_ENV=$(C white)$RAILS_ENV$(C reset)"
}

ps1_login() {
	echo -n "$(C green)${USER}$(C reset)@"
  echo -n -e "$(C cyan)$(hostname -s)$(C reset)"
}

ps1_date() {
  date +'%F %H:%M:%S'
}

ps1_exit_status() {
  local END_CODE=$1
  echo -n ' $?='
  if [ 0 -ne "${END_CODE}" ]; then
    echo -n "$(C red)${END_CODE}$(C reset)"
  else
    echo -n 0
  fi
}

ps1_git() {
  if ! git status --ignore-submodules &>/dev/null; then
    return
  fi
  echo -n ' '
  git-ps
}

ps1_java() {
  if [ -n "${JAVA_HOME}" ]; then
    local version
    version=$(java -version |& head -1 | cut -d ' ' -f 3 | tr -d '"')
    echo -n " java=$(C white)${version}$(C reset)"
  fi
}

ps1_prompt() {
  if [ "$(id -u)" -eq 0 ]; then
    echo -n "$(C red)# $(C reset)"
  else
    echo -n "$(C "${HOST_COLOR}")$ $(C reset)"
  fi
}

ps1_path() {
	local PWD_DIR
	if [ "$(pwd -P)" != "$(pwd)" ]; then
		PWD_DIR=" $(C white)($(C reset)$(C cyan)$(pwd | sed -e "s|^${HOME%/}|~|")$(C reset)$(C white))"
	else
		PWD_DIR=""
	fi
	echo " $(C blue)$(pwd -P | sed -e "s|^${HOME%/}|~|")${PWD_DIR}$(C reset)"
}

function ps1_info() {
  local END_CODE=$?
	echo "$(C backcyan) $(C reset)$(ps1_login)$(ps1_exit_status "$END_CODE")$(ps1_git)$(ps1_rails)$(ps1_java) "
	echo "$(C backcyan) $(C reset)$(ps1_date)$(ps1_path)"
}

if [ "$(id -u)" -ne 0 ]; then
	PS1='$(ps1_info)'
fi

# カーソル位置がずれる問題を回避するため、ここの部分だけは文字列連結にする
if [ "$(id -u)" -eq 0 ]; then
  PS1="${PS1}\n\[\e[1;31m\]\# \[\e[m\]"
else
  PS1="${PS1}\n\[\e[1;34m\]\[\033k\033\134\033k\W\033\134\]\$ \[\e[m\]" # 非rootユーザの場合はドル
fi

export PS1

#if [ "$TERM" != 'screen' -a "$TERM" != 'dumb' -a "$TERM" != 'screen-bce' ]
if [ -z "$STY" -a "$TERM" != 'dumb' ]
then
  [ `which screen 2>/dev/null` ] && screen -rx || screen -D -RR
fi

if [ -n "$STY" ]; then
    export PROMPT_COMMAND='true'
    set_screen_window() {
      HPWD=`basename "$PWD"`
      if [ "$HPWD" = "$USER" ]; then HPWD='~'; fi
      if [ ${#HPWD} -ge 10 ]; then HPWD='..'${HPWD:${#HPWD}-8:${#HPWD}}; fi
      case "$BASH_COMMAND" in
        *\033]0*);;
        "true")
            printf '\ek%s\e\\' "$HPWD:"
            ;;
        *)
            printf '\ek%s\e\\' "$HPWD:${BASH_COMMAND:0:20}"
            ;;
      esac
    }
    trap set_screen_window DEBUG
fi
